<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Chaosmatrix</title>
    <link>https://chaosmatrix.github.io/blog/</link>
    <description>Recent content in Blogs on Chaosmatrix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright chaosmatrix</copyright>
    <lastBuildDate>Fri, 09 Sep 2022 21:05:18 +0800</lastBuildDate><atom:link href="https://chaosmatrix.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[python internal] Implementation of Type Dict</title>
      <link>https://chaosmatrix.github.io/blog/python_internal_implementation_of_type_dict/</link>
      <pubDate>Fri, 09 Sep 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/python_internal_implementation_of_type_dict/</guid>
      <description>Abstract using char[] store data, using Open Addressing handle hash collision hash table will be expanded only there are no valid solt or hash table isn&amp;rsquo;t combined (dict always combined ?) deleting item won&amp;rsquo;t decrease memory usage, only update matching solt with value DKIX_DUMMY during resizing, all old data will be copy into new hash table, then free old hash table memory usage in python3, keys() and values() create view object, not list object (python2) Metrics Operation Average Case Amortized Worst Case copy O(n) O(n) k in d O(1) O(n) get O(1) O(n) set O(1) O(n) delete O(1) O(n) iteration O(n) O(n) Source Code background:</description>
    </item>
    
    <item>
      <title>[python internal] From Python to Bytecode until C</title>
      <link>https://chaosmatrix.github.io/blog/python_internal_from_python_to_bytecode_until_c/</link>
      <pubDate>Sat, 03 Sep 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/python_internal_from_python_to_bytecode_until_c/</guid>
      <description>Abstract Use module dis to get the minimize assembly code. Found the entry from Python/ceval.c with the bytecode that disassembled before. Now the door is open and the road is at your feet. Python -&amp;gt; Bytecode -&amp;gt; C Vesion: Python-3.10.6
1. Example - Python &amp;gt;&amp;gt;&amp;gt; def f(): ... d = {} ... d[1] = 1 ... 2. Python -&amp;gt; Bytecode &amp;gt;&amp;gt;&amp;gt; import dis &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; def f(): ... d = {} .</description>
    </item>
    
    <item>
      <title>[paper review] Fairness and Interactive Performance of O(1) and CFS Linux Kernel Schedulerss</title>
      <link>https://chaosmatrix.github.io/blog/paper-review_fairness_and_interactive_performance_of_o1_and_cfs_linux_kernel_schedulers/</link>
      <pubDate>Thu, 01 Sep 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/paper-review_fairness_and_interactive_performance_of_o1_and_cfs_linux_kernel_schedulers/</guid>
      <description>Abstract For both medium and high load, CFS has higher average latency (5ms ~ 10ms) than O(1). The greater the load, the greater average latency. CFS parameters also has an impact on the average / tail latency. The nice value also has impact of CFS. The lower nice value, the greater time slice. The nice value also has impact of O(1). Review paper: Fairness and interactive performance of O(1) and CFS Linux kernel schedulers</description>
    </item>
    
    <item>
      <title>[python internal] Implementation of Type List</title>
      <link>https://chaosmatrix.github.io/blog/python_internal_implementation_of_type_list/</link>
      <pubDate>Sun, 28 Aug 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/python_internal_implementation_of_type_list/</guid>
      <description>Abstract The only way to shrink list without delete element is making a copy of the old one, like l = l[:len(l)] or a = l.copy() Large list might has lots of allocated but unused space Deleting element has an ability of shrinking list Metrics Operation Average Case Amortized Worst Case Increase Space Inplace Resize copy O(n) O(n) O(n) N I append O(1) O(1) O(1) Y I|- clear O(n) O(n) - Y D count O(n) O(n) - N - extend O(k) O(k) O(k) Y I|- index O(n) O(n) - N - insert O(n) O(n) O(1) Y I|- pop O(n) O(n) Y D|- remove O(n) O(n) Y D|- reverse O(n) O(n) Y - sort O(n log n) O(n log n) - Y - __add__ O(n + k) O(n + k) O(n + k) N I __iadd__ O(k) O(k) O(k) Y I- __mul__ O(n*k) O(n*k) O（n*k) N I __imul__ O(n*(k-1)) O(n*(k-1)) O(n*(k-1)) Y I- Comment:</description>
    </item>
    
    <item>
      <title>[python-internal] Binary and In-place Operation</title>
      <link>https://chaosmatrix.github.io/blog/python_internal_binary_and_in-place_operation/</link>
      <pubDate>Sun, 21 Aug 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/python_internal_binary_and_in-place_operation/</guid>
      <description>Abstract Use of a compound operator that will be compiled into INPLACE_* bytecode instruction at the end may result in a bug that is difficult to debug. Why In-place operation design like this ? to make code more &amp;ldquo;pythonic&amp;rdquo; and increase performance in some case (avoid allocating new memory areas. this can be verified by using sys.getsizeof() to get object&amp;rsquo;s current memory allocated and id() to checking whether object&amp;rsquo;s pointer change or not) What As python coder, binary operation is the code using arithmetic operator like + , - , * , / , % .</description>
    </item>
    
    <item>
      <title>[nginx] HTTP Serving Compressed File</title>
      <link>https://chaosmatrix.github.io/blog/nginx_http_serving_compressed_file/</link>
      <pubDate>Sat, 20 Aug 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/nginx_http_serving_compressed_file/</guid>
      <description>Abstract Most web browsers include built-in support for gzip, deflate, br Most programming languages include built-in support for gzip and deflate, and br typically has community support Nginx - ngx_http_gzip_static_module Conclusions:
Check config: if gzip_static enable or not ? Check request header: client support gzip or not ? when using common algorithm, like &amp;ldquo;gzip&amp;rdquo;, skiping this seems no problem Mapping url to file path with given rule (filename extension is &amp;ldquo;.</description>
    </item>
    
    <item>
      <title>DNS Should I Use DNSSEC</title>
      <link>https://chaosmatrix.github.io/blog/dns_should_i_use_dnssec/</link>
      <pubDate>Mon, 08 Aug 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/dns_should_i_use_dnssec/</guid>
      <description>Abstract WARNING DNSSEC can only works as expected when the resolver ensure the zone and the upstream nameserver support DNSSEC WARNING less 50% top-1m website/domain enable DNSSEC, most zone owned by google/amazon/microsoft &amp;hellip; not support DNSSEC DNSSEC can only make sure the data that the resolver fetching is provided by the zone&amp;rsquo;s owner (require resolver verify the signature) DNSSEC can detect (not prevent) dns hijacking only when resolver/client verify the signature As Owner/Server: Assess only use it when you pretty sure you need it, and can&amp;rsquo;t replace with another way, and should base on the report that the use of DNSSEC validation for your customer&amp;rsquo;s ISPs public resolvers use E2EE protocol to protect the communication between client and server instead of ensuring client get the right server&amp;rsquo;s address try to use DNS-Over-HTTPS/DNS-Over-QUIC to prevent dns hijacking if you can control how client resolve domain, for example desktop/mobile app As Resolver: Recommend But Not Forcing Recursive Resolver: Recommend, try to add additional security check, like credit score of ip address to detect dns hijacking Forward Resolver: Not Recommend, try to communicate with upstream nameserver with E2EE protocol, use DNSSEC only for the zone that pretty sure has full DNSSEC support and sensitive zone (like bank, shop) Basic DNSSEC strengthens authentication in DNS using digital signatures based on public key cryptography.</description>
    </item>
    
    <item>
      <title>UDP Server Listen On 0.0.0.0</title>
      <link>https://chaosmatrix.github.io/blog/udp_server_listen_on_0.0.0.0/</link>
      <pubDate>Mon, 01 Aug 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/udp_server_listen_on_0.0.0.0/</guid>
      <description>Basic UDP is connectionless protocol, it won&amp;rsquo;t create new socket for any incoming datagrams, so, function like LocalAddr() will return incorrect destination address that associated with incoming datagrams, and response datagram will be routed base on system&amp;rsquo;s default routing rule, which might not match client&amp;rsquo;s 5-tuple.
Example:
# basic 1. server: * has two address: 10.1.2.2(primary) and 10.1.2.3(secondary) * default route is 10.1.2.2 (default outgoing address) 2. client: * has one address: 10.</description>
    </item>
    
    <item>
      <title>Think Least_Conn In Math</title>
      <link>https://chaosmatrix.github.io/blog/think_least_conn_in_math/</link>
      <pubDate>Fri, 29 Jul 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/think_least_conn_in_math/</guid>
      <description>Basic least_conn is a load balance algorithm, which distributed incoming request to the server with least connected connections.
Think in math distribute requests to n server, least_conn try to archive a goal every server as busy as others.
total time d that n servers finished requests:
$$\begin{align*} &amp; d = \sum_{i=1}^nd_i = n * d_{avg} \\ \\ &amp; {d_i}\text{ : duration of } i^{th} \text{ server to finish the distributed requests} \\ &amp; {d_{avg}}\text{ : avg duration that a server finished distribted requests} \\ \end{align*}$$ what least_conn algorithm want to archive is :</description>
    </item>
    
    <item>
      <title>Lock-Free Update Data</title>
      <link>https://chaosmatrix.github.io/blog/lock_free_update_data/</link>
      <pubDate>Thu, 28 Jul 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/lock_free_update_data/</guid>
      <description>Rule:
update pointer, rather than update pointer&amp;rsquo;s data an object with zero reference (unreachable object), will be recycle by GC var rcuCfg *RcuCfg type RcuCfg struct { cfg *Cfg lock sync.Mutex // even don&amp;#39;t need } func newCfgFromOld(old *Cfg) { cfg := &amp;amp;Cfg{} DeepCopy(cfg, old) return cfg } func rcuRead() *Cfg { return rcuCfg.cfg } func rcuUpdate() { rcuCfg.lock.Lock() defer rcuCfg.lock.Unlock() cfg := newCfgFromOld(rcuCfg.cfg) rcuCfg.cfg = cfg } reference:
what is RCU </description>
    </item>
    
    <item>
      <title>Detect Half Closed Connection</title>
      <link>https://chaosmatrix.github.io/blog/detect_half_closed_connection/</link>
      <pubDate>Wed, 27 Jul 2022 21:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/detect_half_closed_connection/</guid>
      <description>$common$ read 1-byte with deadline depend on program language or platform implementation, some use read 0-byte
WARNING: you should only use this way when you ensure there&#39;s no unread value data
// Golang, read 0-byte, always return nil // https://github.com/golang/go/issues/10940#issuecomment-245773886 func checkConn(conn net.Conn, timeout time.Duration) error { buf := make([]byte, 1) err := conn.SetReadDeadline(time.Now().Add(timeout)) if err != nil { return err } n, err := conn.Read(buf) if err == io.EOF { return err } if n !</description>
    </item>
    
    <item>
      <title>Transaction Ops</title>
      <link>https://chaosmatrix.github.io/blog/transaction-ops/</link>
      <pubDate>Tue, 17 Dec 2019 20:05:18 +0800</pubDate>
      
      <guid>https://chaosmatrix.github.io/blog/transaction-ops/</guid>
      <description>Rules Every Operation must has RollBack Operation All ops done success or no ops done Transaction Ops Rule Stages Backup Stage backup current system state GoTo Next if Success Exit if it fails PreTest Stage in order to generate test rule make sure system working before apply operation GoTo Next if Success Exit if it fails Operate Stage do the operation that we want to do GoTo Next if Success GoTo RollBack Stage if it fails PostTest Stage apply custom-built test rule apply test rule generate in PreTest Stage GoTo RollBack Stage if it fails RollBack Stage only exec while Failed PostTest Stage apply Backup Stage to rollback system Use Transaction Ops Framework Example Update Network Route #!</description>
    </item>
    
  </channel>
</rss>
